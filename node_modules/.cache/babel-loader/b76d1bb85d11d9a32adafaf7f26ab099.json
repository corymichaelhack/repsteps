{"remainingRequest":"/Users/coryhack/headless-recorder/node_modules/babel-loader/lib/index.js!/Users/coryhack/headless-recorder/node_modules/eslint-loader/index.js??ref--13-0!/Users/coryhack/headless-recorder/src/modules/code-generator/base-generator.js","dependencies":[{"path":"/Users/coryhack/headless-recorder/src/modules/code-generator/base-generator.js","mtime":1644501717687},{"path":"/Users/coryhack/headless-recorder/node_modules/cache-loader/dist/cjs.js","mtime":1643048371315},{"path":"/Users/coryhack/headless-recorder/node_modules/babel-loader/lib/index.js","mtime":1643048374140},{"path":"/Users/coryhack/headless-recorder/node_modules/eslint-loader/index.js","mtime":1643048371599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}