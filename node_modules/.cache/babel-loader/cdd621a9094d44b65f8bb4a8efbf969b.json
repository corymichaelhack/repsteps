{"remainingRequest":"/Users/coryhack/repSteps-recorder/node_modules/thread-loader/dist/cjs.js!/Users/coryhack/repSteps-recorder/node_modules/babel-loader/lib/index.js!/Users/coryhack/repSteps-recorder/node_modules/eslint-loader/index.js??ref--13-0!/Users/coryhack/repSteps-recorder/src/modules/code-generator/base-generator.js","dependencies":[{"path":"/Users/coryhack/repSteps-recorder/src/modules/code-generator/base-generator.js","mtime":1644501725049},{"path":"/Users/coryhack/repSteps-recorder/node_modules/cache-loader/dist/cjs.js","mtime":1643048371315},{"path":"/Users/coryhack/repSteps-recorder/node_modules/thread-loader/dist/cjs.js","mtime":1643048371203},{"path":"/Users/coryhack/repSteps-recorder/node_modules/babel-loader/lib/index.js","mtime":1643048374140},{"path":"/Users/coryhack/repSteps-recorder/node_modules/eslint-loader/index.js","mtime":1643048371599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/coryhack/repSteps-recorder/src/modules/code-generator/base-generator.js"],"names":["Block","headlessActions","eventsToRecord","defaults","blankLinesBetweenBlocks","keyCode","BaseGenerator","options","_options","Object","assign","_blocks","_screenshotCounter","_hasNavigation","Error","events","console","log","result","i","length","action","selector","value","href","tagName","text","escapedSelector","replace","push","_handleKeyDown","_handleClick","_handleChange","VIEWPORT","unshift","_handleViewport","windowWidth","windowHeight","browserVendor","NAVIGATION","_handleNavigation","SCREENSHOT","_handleScreenshot","_postProcess","newLine","block","lines","getLines","line","_postProcessAddBlankLines","addLine","type","KEYDOWN","_escapeUserInput","CLICK","CHANGE","_frame","blankLine","splice"],"mappings":"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","sourcesContent":["import Block from '@/modules/code-generator/block'\nimport { headlessActions, eventsToRecord } from '@/modules/code-generator/constants'\n\nexport const defaults = {\n  blankLinesBetweenBlocks: true,\n  keyCode: 13,\n}\nexport default class BaseGenerator {\n  constructor(options) {\n    this._options = Object.assign(options)\n    this._blocks = []\n    this._screenshotCounter = 0\n\n    this._hasNavigation = false\n  }\n\n  generate() {\n    throw new Error('Not implemented.')\n  }\n\n  _parseEvents(events) {\n    console.log(events)\n    let result = ''\n\n    if (!events) return result\n    for (let i = 0; i < events.length; i++) {\n      const { action, selector, value, href, keyCode, tagName, text } = events[i]\n      const escapedSelector = selector ? selector?.replace(/\\\\/g, '\\\\\\\\') : selector\n\n      switch (action) {\n        case 'keydown':\n          if (keyCode === this._options.keyCode) {\n            this._blocks.push(this._handleKeyDown(value))\n          }\n          break\n        case 'click':\n          this._blocks.push(this._handleClick(tagName, text))\n          break\n        case 'change':\n          console.log(tagName)\n          if (tagName === 'SELECT') {\n            this._blocks.push(this._handleChange(escapedSelector, value, text))\n          }\n          break\n        case headlessActions.VIEWPORT:\n          this._blocks.unshift(\n            this._handleViewport(value.windowWidth, value.windowHeight, value.browserVendor)\n          )\n          break\n        case headlessActions.NAVIGATION:\n          this._blocks.push(this._handleNavigation(href))\n          this._hasNavigation = true\n          break\n        case headlessActions.SCREENSHOT:\n          this._blocks.push(this._handleScreenshot(value))\n          break\n      }\n    }\n\n    this._postProcess()\n\n    const newLine = `\\n`\n\n    for (let block of this._blocks) {\n      const lines = block.getLines()\n      for (let line of lines) {\n        result += line.value + newLine\n      }\n    }\n\n    return result\n  }\n\n  _postProcess() {\n    if (this._options.blankLinesBetweenBlocks && this._blocks.length > 0) {\n      this._postProcessAddBlankLines()\n    }\n  }\n\n  _handleKeyDown(value) {\n    const block = new Block()\n    block.addLine({\n      type: eventsToRecord.KEYDOWN,\n      value: `Type value: '${this._escapeUserInput(value)}' into INPUT and hit Return/Enter`,\n    })\n    return block\n  }\n\n  _handleClick(tagName, text) {\n    const block = new Block()\n    if (tagName === 'INPUT') {\n      block.addLine({\n        type: eventsToRecord.CLICK,\n        value: `Click inside ${tagName} field`,\n      })\n    } else {\n      block.addLine({\n        type: eventsToRecord.CLICK,\n        value: `Click ${tagName} tag with text: \"${text}\"`,\n      })\n    }\n    return block\n  }\n\n  _handleChange(selector, value) {\n    return new Block({\n      type: eventsToRecord.CHANGE,\n      value: `Input a value like: '${value}'`,\n    })\n  }\n\n  _handleViewport(windowWidth, windowHeight, browserVendor) {\n    return new Block({\n      type: headlessActions.VIEWPORT,\n      value: `BrowserInfo:\\n  Broswer Vendor: ${browserVendor}\\n  Window size: width: ${windowWidth}, height: ${windowHeight}`,\n    })\n  }\n\n  _handleScreenshot(value) {\n    this._screenshotCounter += 1\n\n    if (value) {\n      return new Block({\n        type: headlessActions.SCREENSHOT,\n        value: `const element${this._screenshotCounter} = await page.$('${value}')\nawait element${this._screenshotCounter}.screenshot({ path: 'screenshot_${this._screenshotCounter}.png' })`,\n      })\n    }\n\n    return new Block({\n      type: headlessActions.SCREENSHOT,\n      value: `await ${this._frame}.screenshot({ path: 'screenshot_${this._screenshotCounter}.png', fullPage: true })`,\n    })\n  }\n\n  _handleNavigation(href) {\n    const block = new Block()\n    block.addLine({\n      type: headlessActions.NAVIGATION,\n      value: `Navigate to: ${href}`,\n    })\n    return block\n  }\n\n  _postProcessAddBlankLines() {\n    let i = 0\n    while (i <= this._blocks.length) {\n      const blankLine = new Block()\n      blankLine.addLine({ type: null, value: '' })\n      this._blocks.splice(i, 0, blankLine)\n      i += 2\n    }\n  }\n\n  _escapeUserInput(value) {\n    return value?.replace(/\\\\/g, '\\\\\\\\')?.replace(/'/g, \"\\\\'\")\n  }\n}\n"]}]}