{"remainingRequest":"/Users/coryhack/repSteps-recorder/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/coryhack/repSteps-recorder/src/options/OptionsApp.vue?vue&type=style&index=0&id=57f6fb84&scoped=true&lang=css","dependencies":[{"path":"/Users/coryhack/repSteps-recorder/src/options/OptionsApp.vue","mtime":1644510201202},{"path":"/Users/coryhack/repSteps-recorder/node_modules/css-loader/dist/cjs.js","mtime":1643048372848},{"path":"/Users/coryhack/repSteps-recorder/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1643048377017},{"path":"/Users/coryhack/repSteps-recorder/node_modules/postcss-loader/src/index.js","mtime":1643048374089},{"path":"/Users/coryhack/repSteps-recorder/node_modules/postcss-loader/src/index.js","mtime":1643048374089},{"path":"/Users/coryhack/repSteps-recorder/node_modules/cache-loader/dist/cjs.js","mtime":1643048371315},{"path":"/Users/coryhack/repSteps-recorder/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":1643048376026}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmJvZHkgewogIGJhY2tncm91bmQ6ICNmOWZhZmM7CiAgaGVpZ2h0OiAxMDB2aDsKfQoKYm9keS5kYXJrIHsKICBiYWNrZ3JvdW5kOiAjMTYxNjE2Owp9Cgpjb2RlIHsKICBAYXBwbHkgZm9udC1zZW1pYm9sZDsKfQoKYSB7CiAgQGFwcGx5IHRleHQtYmx1ZSB1bmRlcmxpbmUgdGV4dC1zbSB0ZXh0LXJpZ2h0Owp9CgpoMiB7CiAgQGFwcGx5IHRleHQtZ3JheS1kYXJraXNoIHRleHQteGwgZm9udC1zZW1pYm9sZCBtYi01IGRhcms6dGV4dC1ncmF5LWxpZ2h0Owp9CgpsYWJlbCB7CiAgY29sb3I6ICMwMDA7CiAgQGFwcGx5IGZvbnQtc2VtaWJvbGQgdGV4dC1zbSBtYi0yIGJsb2NrIGRhcms6dGV4dC1ncmF5LWxpZ2h0ZXN0Owp9CgpzZWN0aW9uIHsKICBAYXBwbHkgYmctd2hpdGUgYm9yZGVyLWdyYXktbGlnaHQgYm9yZGVyIGJvcmRlci1zb2xpZCByb3VuZGVkLW1kIHAtNCBwYi0xMCBtYi02IGRhcms6YmctYmxhY2stc2hhZHkgZGFyazpib3JkZXItZ3JheS1kYXJrOwp9CgpwIHsKICBAYXBwbHkgdGV4dC1ncmF5LWRhcmtpc2ggdGV4dC14cyBtYi0yIGRhcms6dGV4dC13aGl0ZTsKfQo="},{"version":3,"sources":["/Users/coryhack/repSteps-recorder/src/options/OptionsApp.vue"],"names":[],"mappings":";AA6LA,CAAC,CAAC,CAAC,EAAE;EACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACf;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB;;AAEA,CAAC,CAAC,CAAC,EAAE;EACH,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB;;AAEA,EAAE;EACA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C;;AAEA,CAAC,EAAE;EACD,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E;;AAEA,CAAC,CAAC,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjvD","file":"/Users/coryhack/repSteps-recorder/src/options/OptionsApp.vue","sourceRoot":"","sourcesContent":["<template>\n  <main class=\"bg-gray-lightest flex py-9 w-full h-screen overflow-auto dark:bg-black\">\n    <div class=\"flex flex-col w-1/4 pt-12 pr-6\">\n      <a href=\"#\" target=\"_blank\">Docs</a>\n      <a href=\"#\" target=\"_blank\">GitHub</a>\n      <a href=\"#\">Release notes</a>\n      <a href=\"#\" target=\"_blank\">Chrome Web Store</a>\n    </div>\n    <div class=\"flex flex-col w-1/2\">\n      <header class=\"flex flex-row justify-between items-center mb-3.5\">\n        <div class=\"flex items-baseline\">\n          <h1 class=\"text-blue text-2xl font-bold mr-1\">\n            Replication Steps Recorder\n          </h1>\n          <span class=\"text-gray-dark dark:text-gray-light text-sm\">v{{ version }}</span>\n        </div>\n        <span\n          role=\"alert\"\n          class=\"text-gray-darkest dark:text-white text-base font-semibold\"\n          v-show=\"saving\"\n          >Saving...</span\n        >\n      </header>\n\n      <section>\n        <h2>Recorder</h2>\n        <label for=\"custom-data-attribute\">Custom data attribute</label>\n        <div class=\"mb-6\">\n          <!-- <input\n            id=\"custom-data-attribute\"\n            class=\"w-full placeholder-gray-darkish bg-gray-lighter h-7 rounded px-2 mb-2 text-sm\"\n            type=\"text\"\n            v-model.trim=\"options.code.dataAttribute\"\n            @change=\"save\"\n            placeholder=\"your custom data-* attribute\"\n          /> -->\n          <p>\n            Define an attribute that we'll attempt to use when selecting the elements, i.e\n            \"data-custom\". This is handy when React or Vue based apps generate random class names.\n          </p>\n          <p>\n            <span role=\"img\" aria-label=\"siren\">ðŸš¨</span>\n            <span class=\"ml-1 font-bold text-black-shady dark:text-white\"\n              >When <span class=\"italic\">\"custom data attribute\"</span>&nbsp; is set, it will take\n              precedence from over any other selector (even ID)\n            </span>\n          </p>\n        </div>\n        <div>\n          <label>Set key code</label>\n          <div class=\"mb-2\">\n            <Button @click=\"listenForKeyCodePress\" class=\"font-semibold text-white text-sm\">\n              {{ recordingKeyCodePress ? 'Capturing...' : 'Record Key Stroke' }}\n            </Button>\n            <span class=\"text-gray-dark dark:text-gray-light text-sm ml-3\">\n              {{ options.code.keyCode }}\n            </span>\n          </div>\n          <p>\n            What key will be used for capturing input changes. The value here is the key code. This\n            will not handle multiple keys.\n          </p>\n        </div>\n      </section>\n\n      <section>\n        <h2>Generator</h2>\n        <!-- <Toggle v-model=\"options.code.waitForSelectorOnClick\">\n          Add <code>waitForSelector</code> lines before every\n          <code>page.click()</code>\n        </Toggle> -->\n        <Toggle v-model=\"options.code.blankLinesBetweenBlocks\">\n          Add blank lines between code blocks\n        </Toggle>\n      </section>\n\n      <section>\n        <h2 class=\"\">Extension</h2>\n        <Toggle v-model=\"options.extension.darkMode\">\n          Use Dark Mode {{ options.extension.darkMode }}\n        </Toggle>\n        <!-- <Toggle v-model=\"options.extension.telemetry\">\n          Allow recording of usage telemetry\n        </Toggle> -->\n        <p>\n          We only record clicks for basic product development, no website content or input data.\n          Data is never, ever shared with 3rd parties.\n        </p>\n      </section>\n    </div>\n  </main>\n</template>\n\n<script>\nimport { version } from '../../package.json'\n\nimport storage from '@/services/storage'\nimport { isDarkMode } from '@/services/constants'\nimport { defaults as code } from '@/modules/code-generator/base-generator'\nimport { merge } from 'lodash'\n\nimport Button from '@/components/Button'\nimport Toggle from '@/components/Toggle'\n\nconst defaultOptions = {\n  code,\n  extension: {\n    // telemetry: true,\n    darkMode: isDarkMode(),\n  },\n}\n\nexport default {\n  name: 'OptionsApp',\n  components: { Toggle, Button },\n\n  data() {\n    return {\n      version,\n      loading: true,\n      saving: false,\n      options: defaultOptions,\n      recordingKeyCodePress: false,\n    }\n  },\n\n  watch: {\n    options: {\n      handler() {\n        this.save()\n      },\n      deep: true,\n    },\n\n    'options.extension.darkMode': {\n      handler(newVal) {\n        document.body.classList[newVal ? 'add' : 'remove']('dark')\n      },\n      immediate: true,\n    },\n  },\n\n  mounted() {\n    this.load()\n    chrome.storage.onChanged.addListener(({ options = null }) => {\n      if (options && options.newValue.extension.darkMode !== this.options.extension.darkMode) {\n        this.options.extension.darkMode = options.newValue.extension.darkMode\n      }\n    })\n  },\n\n  methods: {\n    async save() {\n      this.saving = true\n      await storage.set({ options: this.options })\n\n      setTimeout(() => (this.saving = false), 500)\n    },\n\n    async load() {\n      const { options } = await storage.get('options')\n      merge(defaultOptions, options)\n      this.options = Object.assign({}, this.options, defaultOptions)\n\n      this.loading = false\n    },\n\n    listenForKeyCodePress() {\n      this.recordingKeyCodePress = true\n\n      const keyDownFunction = e => {\n        this.recordingKeyCodePress = false\n        this.updateKeyCodeWithNumber(e)\n        window.removeEventListener('keydown', keyDownFunction, false)\n        e.preventDefault()\n      }\n\n      window.addEventListener('keydown', keyDownFunction, false)\n    },\n\n    updateKeyCodeWithNumber(evt) {\n      this.options.code.keyCode = parseInt(evt.keyCode, 10)\n      this.save()\n    },\n  },\n}\n</script>\n\n<style scoped>\nbody {\n  background: #f9fafc;\n  height: 100vh;\n}\n\nbody.dark {\n  background: #161616;\n}\n\ncode {\n  @apply font-semibold;\n}\n\na {\n  @apply text-blue underline text-sm text-right;\n}\n\nh2 {\n  @apply text-gray-darkish text-xl font-semibold mb-5 dark:text-gray-light;\n}\n\nlabel {\n  color: #000;\n  @apply font-semibold text-sm mb-2 block dark:text-gray-lightest;\n}\n\nsection {\n  @apply bg-white border-gray-light border border-solid rounded-md p-4 pb-10 mb-6 dark:bg-black-shady dark:border-gray-dark;\n}\n\np {\n  @apply text-gray-darkish text-xs mb-2 dark:text-white;\n}\n</style>\n"]}]}